fmod SYNTAX is
    sorts aid Stmt stmtList netState .
    
    op self : -> aid .
    subsort Stmt < stmtList .
    op _;_ : stmtList stmtList -> stmtList .
endfm


fmod ENVIRONMENT is
    pr SYNTAX .
    inc INT .
    
    sort Var Env Expr .
    ops a1 a2 a3 a4 a5 a6 : -> Var .
    subsort Int Var < Expr .
    
    op mt : -> Env [ctor] .
    op _:_ : Var Int -> Env .
    op __ : Env Env -> Env [assoc comm] .
    
    
    ops _+_ _*_ _-_ : Expr Expr -> Expr [ditto] .
---    ops _<_ _>_ _==_ : Expr Expr -> Expr .			--- !!! uncomment this line, warnings are considered.
    
    op eval : Expr Env -> Expr .
    op _(_) : Env Var -> Int .
    op _[_->_] : Env Var Int -> Env .
    op remove : Env Var -> Env .

    
    
    var e : Env .		var v v' : Var .		var i : Int .		var ex ex' : Expr .

    eq remove (mt , v) = mt .
    eq remove( (v : i) e , v') = if v == v' then e else (v : i) remove(e,v') fi .

    eq e [ v -> i ] = remove(e,v) v : i .

    eq eval(ex + ex' , e) = eval(ex , e) + eval(ex' , e) .
    eq eval(ex * ex' , e) = eval(ex , e) * eval(ex' , e) .
    eq eval(ex - ex' , e) = eval(ex , e) - eval(ex' , e) .
    eq eval(i , e) = i .
    eq eval(v , (v' : i) e) = if v == v' then i else eval(v,e) fi .
---    eq eval(ex < ex' , e) = if eval(ex,e) < eval (ex' , e) then 1 else 0 fi .			--- !!! uncomment this line, warnings are considered.
---    eq eval(ex > ex' , e) = if eval(ex,e) > eval (ex' , e) then 1 else 0 fi .			--- !!! uncomment this line, warnings are considered.
---    eq eval(ex == ex' , e) = if eval(ex,e) == eval (ex' , e) then 1 else 0 fi .			--- !!! uncomment this line, warnings are considered.
    
    eq e ( v ) = eval ( v , e ) .
--- ex :  red in ENVIRONMENT : eval ( a1 + 4 , mt a1 : 3) .

endfm

fmod HANDLERS is
    ex ENVIRONMENT .
---    pr BUFFERS .
    sort DB hid hname .
    op emptyHL : -> DB [ctor] .
    op _._ : aid hname -> hid [ctor] .
    op _{_} : hid stmtList -> DB .
    op __ : DB DB -> DB [comm assoc] .
    op Handler : DB hid -> stmtList .
    

    
    var db : DB .		var i j : aid .		var h h' : hname .		var s : stmtList .

    eq Handler ( (i . h { s } ) db,  j . h' ) = if i . h == j . h' then s else Handler(db, j . h') fi .

endfm


---(
fmod HANDLERS is
    ex ENVIRONMENT .
---    pr BUFFERS .
    sort DB hid hname .
    
    op _:{_} : hname stmtList -> Env .
    op _(_) : Env hname -> stmtList .

    
    op _{_} : hid stmtList -> DB .
    op __ : DB DB -> DB .
    op Handler : Env hid -> stmtList .
    op _._ : aid hname -> hid .
    
    var e : Env .		var v : Var .		var i : Int .
    var id : aid .		var h h' : hname .		var s : stmtList .
    
    eq (h' : { s } ) e ( h ) = if h' == h then s else e ( h ) fi .
    eq (v : i) e ( h ) = e ( h ) .
    eq Handler ( e,  id . h ) = e ( h ) .

endfm)
