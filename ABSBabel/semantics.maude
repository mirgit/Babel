load basics.maude
load ABSBuffer.maude


mod STMTEXECUTION is
    pr SYNTAX .
    pr BUFFERS .
    op <_,_> : Env stmtList -> trans .
    op I<_,_> : Env stmtList -> trans .
    op __ : trans msg -> trans .	
    op Tee : -> Stmt .
    op _=_ : Var Expr -> Stmt [prec 45] .
    op _!_ : Var hname -> Stmt [prec 45] .
    op if(_) {_} else {_} : Expr stmtList stmtList -> Stmt .
    op skip : -> Stmt .
    op endH : -> Stmt . 		--- can empty stmt exist?
    
    op GenerateMSG : aid hname aid  -> msg .

    var e e' : Env .		var pi : Stmt .   vars pi' pi1 pi2 : stmtList .
    var ex : Expr .		var v : Var .      var m : msg .
    crl [COND1] :
        I< e , if ( ex ) { pi1 } else { pi2 } > => < e' , pi' >
            if eval( ex,e) > 0 /\ I< e , pi1 > => < e' , pi' > .

    crl [COND2] :
        I< e , if ( ex ) { pi1 } else { pi2 } > => < e' , pi' >
            if eval( ex,e) == 0 /\ I< e , pi2 > => < e' , pi' > .

    rl [SKIP] :
        I< e , skip > => < e , Tee > .

    rl [ENDH] :
        I< e , endH > => < e , Tee > .

    rl [ASSIGN] :
        I< e , v = ex > => < e [ v -> eval(ex,e) ] , Tee > .
        
    crl [SEQ] :
        I< e , pi ; pi1 > => < e' , pi' ; pi1 > if I< e , pi > => < e' , pi' > .

    crl [SEQ2] :
        I< e , Tee ; pi1 > => < e' , pi' > if < e , pi1 > => < e' , pi' > .

    crl [SEQM] :
        I< e , pi ; pi1 > => < e' , pi' ; pi1 > m if I< e , pi > => < e' , pi' > m .

    crl [SEQ2M] :
        I< e , Tee ; pi1 > => < e' , pi' > m if < e , pi1 > => < e' , pi' > m .

    var n : hname .     vars i j : aid .

    rl [SEND] :
        I< e , v ! n > => < e , Tee > GenerateMSG(e ( self ), n , e ( v ) ) .
        
    eq GenerateMSG(i,n, j) = msg (i,n,j) .


endm




mod ACTOR is
    pr STMTEXECUTION .
    pr POLICIES .
    pr HANDLERS .
    sort localState .
    op __ : localState msg -> localState [prec 50] .
    op __ : DB localState -> localState [prec 60] .
    op <_,_,_> : Env bufferActor stmtList -> localState .
    op I<_,_,_> : Env bufferActor stmtList -> localState .


    var e e' : Env .		var b : bufferActor .		var pi pi' : stmtList .
    var m : msg .		var db : DB .
    crl [TAKE] :
        I< e , b , Tee > => < e [ sender -> sndr(m) ] , remove(b,m) , handler ( m . name ) > if m := takePolicy(e,b) /\ b =/= emptyBA .
    crl [STMTEXECUTION_1] :
        I< e , b , pi > => < e' , b , pi' > if I< e , pi > => < e' , pi' > /\ pi =/= pi' .
    crl [STMTEXECUTION_2] :
        I< e , b , pi > => < e' , b , pi' > m if I< e , pi > => < e' , pi' > m /\ pi =/= pi' .
    crl [RECEIVE_A] :
        I< e , b , pi > m => < e , insert(b,m) , pi > if rcvPolicy(b,m) .

endm



mod NETWORK is
    pr POLICIES .

    op __ : netState msg -> netState [prec 50] .
    op __ : DB netState -> netState [prec 60] .
    op <_,_> : Env bufferNet -> netState .
    op I<_,_> : Env bufferNet -> netState .

    var e : Env .		var b : bufferNet .
    var m : msg .		var db : DB .
    
    rl [RECEIVE_N] :
        I< e , b > m => < e , insert(b, tag(e,m)) > .

    crl [TRANSFER] :
        I< e , b > => < e , remove(b,m) > m if m := transferPolicy(e,b) /\ empty(b) == false .

endm



mod COMPOSITION is
    pr NETWORK .
    pr ACTOR .


    sort actorList Composition .
    
    op _:_ : aid localState -> actorList [prec 62 ] .
    op emptyAL : -> actorList [ctor] .
    op __ : actorList actorList -> actorList [comm assoc prec 65 ] .
    op <_,_,_> : Env actorList netState -> Composition [ prec 70 ].
    
    ops start terminate : Env aid -> Env .
    op cogStat : Env aid -> Int .
    op _(_) : actorList aid -> localState [ prec 68 ] .
    op remove : actorList aid -> actorList .
    op _[_->_] : actorList aid localState -> actorList .
    
    
    var s : actorList .	var n : netState .		var s1 : localState .
    var x y : aid .		var e e' e'' e1 e2 : Env .	var i : Int .   var db : DB .
    var b b' : bufferActor .	var b2 b'' : bufferNet .
    var pi pi' : stmtList .	var m : msg .
    
    eq remove(emptyAL , x) = emptyAL .
    eq remove( (x : s1) s,y) = if x == y then s else (x : s1 ) remove(s,y) fi .
    eq s [ x -> < e , b , pi > ] = (x : < e , b , pi >) remove(s,x) .
    eq x : s1 s ( y ) = if x == y then s1 else s ( y ) fi .
    
---    eq start(e,x) = setCog(e,x) .
    eq start(e (Cog: g(x a:topology) : 0 f:agroup) ,x) = e (Cog: g(x a:topology) : 1 f:agroup) .
    eq terminate(e (Cog: g(x a:topology) : 1 f:agroup) ,x) = e (Cog: g(x a:topology) : 0 f:agroup) .
    eq cogStat(e (Cog: g(x a:topology) : i f:agroup) ,x) = i .
---    eq terminate(e,x ) = e . ---[ cog(x) -> 0 ] .
    op finished : actorList -> Bool .
    op finished_1 : localState -> Bool .
    eq finished_1( < e , b , Tee > ) = true .
    eq finished_1(s1) = false [owise] .
    eq finished(emptyAL) = true .
    eq finished((x : s1) s ) = finished_1(s1) and finished(s) .


    crl [ACTOR_PROG_I] :
        < e , (x : s1) s , n > => < start(e,x) , (s[ x -> < e' , b' , pi' > ]) , n > if
             schedPolicy(e,n,x) /\  < e1 , b , pi > := s1  /\ I< e1 , b , pi > => < e' , b' , pi' > /\ cogStat(e,x) == 0 .
    
    crl [ACTOR_PROG_II] :
        < e , (x : s1) s , n > => < e , (s[ x -> < e' , b , pi' > ]) , n > if
            < e1 , b , pi > := s1 /\ I< e1 , b , pi > => < e' , b , pi' > /\ pi =/= endH .       ---  changed b' to b
            
    crl [ACTOR_PROG_III] :
        < e , (x : s1) s , n > => < terminate(e , x) , (s [ x -> < e' , b' , pi' > ]) , n > if
            < e1 , b , endH > := s1 /\ I< e1 , b , endH > => < e' , b' , pi' > .
            
    crl [COMMUNICATION_I] :
        < e , (x : s1) s , n > => < e , s [ x -> < e' , b' , pi' > ] , < e'' , b'' > > if
            < e1 , b , pi > := s1 /\ I< e1 , b , pi > => < e' , b' , pi' > m /\  < e2 , b2 > := n /\ I< e2 , b2 > m => < e'' , b'' > .
             
    crl [COMMUNICATION_II] :
        < e , s , n > => < e , s [ y -> < e' , b' , pi' > ] , < e'' , b'' > > if
            < e2 , b2 > := n /\ I< e2 , b2 > => < e'' , b'' > m /\ y := rcvr(m) /\ < e1 , b , pi > := s ( y ) /\ I< e1 , b , pi > m => < e' , b' , pi' > .
    




endm

mod MAIN is
    pr COMPOSITION .
    ops a1 a2 a3 a4 a5 a6 : -> Var .
    ops c1 c2 : -> aid .
    ops handler1 handler2 : -> hname .
    op self : -> Var .
    op fakedb : -> DB .

endm

set print color on .
break select ACTOR_PROG_I ACTOR_PROG_II ACTOR_PROG_III COMMUNICATION_I COMMUNICATION_II .
---set break on .
---set trace on .
---set trace eq off .
---set trace rl on .
