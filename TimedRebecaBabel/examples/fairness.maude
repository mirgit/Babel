load semantics.maude
load model-checker.maude

mod MAIN is
    pr COMPOSITION .
    ops sender self dest dest1 dest2 : -> Var .
    ops a b c : -> aid .
    ops Const mes1 mes2 bback cback : -> hname .
    op initialState : -> Composition .
    eq handler(a . Const) = (dest1 ! mes1 ; dest2 ! mes2 ; endH) .
    eq handler(a . bback) = (dest1 ! mes1 after (1) ; endH) .
    eq handler(a . cback) = (dest2 ! mes2 after (1) ; endH) .
    eq handler(b . mes1) =  (dest ! bback ; endH) .
    eq handler(c . mes2) =  (dest ! cback ; endH) .
	eq initialState =
	< mt (now : 0), 
	(a : < mt (now : 0) (self : a) (dest1 : b) (dest2 : c) , msg(a,Const,a,0) / emptyBA , Tee >)
	(b : < mt (now : 0) (self : b) (dest : a) , emptyBA , Tee >)	
	(c : < mt (now : 0) (self : c) (dest : a) , emptyBA , Tee >)	
	emptyAL ,
	
	< mt topo: (a b c ) (now : 0) , emptyBN > > .

endm


--- frew [100] in MAIN : initialState .

mod DF-pred is
	pr MAIN .
	inc SATISFACTION .
	including MODEL-CHECKER .
	including LTL-SIMPLIFIER .
	subsort Composition < State .
	

	ops recb recc : -> Prop .

	var al : actorList .	vars e e1  : Env .	var n : netState .	var ba : bufferActor .	var y : stmtList .

	eq (< e , al b : < e1 , msg(a,mes1,b,t1:Int ) / emptyBA , y > , n >) |= recb = true .
	eq (< e , al c : < e1 , msg(a,mes2,c,t2:Int ) / emptyBA , y > , n >) |= recc = true .
	eq c:Composition |= p:Prop = false [owise] .

endm

red modelCheck(initialState , [](<> recb /\ <> recc)) .
---red modelCheck(initialState , ([] <> progb /\ [] <> progc) => ([](<> recb /\ <> recc))) .
---starvation: 
--- red modelCheck(initialState, [] ( (<> tr1onBr) /\ (<> tr2onBr) ) ) .
--- red modelCheck(initialState, ([] <> progt1 /\ [] <> progt2 /\ [] <> progc) => ( ([] <> tr1onBr) /\ ([] <> tr2onBr) ) ) .
---safety: 
--- red modelCheck(initialState, [] (~(tr1onBr /\ tr2onBr))) .


--- search [1,100] in MAIN : initialState =>* < e1:Env , a:actorList tr1 : < e2:Env onBr : 1 , x:bufferActor , y:stmtList > tr2 : < e3:Env onBr : 1 , x:bufferActor , y:stmtList > , n:netState > .

--- show search graph .
