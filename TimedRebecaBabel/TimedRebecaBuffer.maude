
mod BUFFERS is
    pr ENVIRONMENT .
    ex HANDLERS .
    op msg : aid hname aid Int -> msg [ctor] .
    op _. name : msg -> hid .
    ops sndr rcvr : msg -> aid .
    op tag : Env msg -> msg .
    op ar : msg -> Int .

    var i j : aid .		var n : hname .    var e : Env .	var k : Int .

    eq rcvr(msg(i,n,j,k)) = j .
    eq sndr(msg(i,n,j,k)) = i .
    eq ar(msg(i,n,j,k)) = k .
    eq msg(i,n,j,k) . name = (j . n ) .
    eq tag(e,msg(i,n,j,k)) = msg(i,n,j,k) .

    subsort msg < bufferActor .
    sort bufferActor .
    op emptyBA : -> bufferActor [ctor] .
    op _/_ : bufferActor bufferActor -> bufferActor [ctor assoc] .
    ops remove insert : bufferActor msg -> bufferActor .
    op include : msg bufferActor -> Bool .
    op isEmpty : bufferActor -> Bool .



    vars m m' : msg .		vars q q' : bufferActor .

    eq (emptyBA / q) = (q / emptyBA) .

    eq insert(q, m) = (m / q) .
    eq remove(emptyBA, m) = emptyBA .
    eq remove((m' / q),m) = if m == m' then q else (m' / remove(q, m)) fi .
    eq include(m,emptyBA) = false .
    eq include(m,(m' / q)) = if m == m' then true else include(m,q) fi .
    eq isEmpty(q) = (q == emptyBA) .

    op head : bufferActor -> msg .										--- NEW
    eq head((m / emptyBA)) = m .
    eq head((m / q)) = if ar(m) < ar(head(q)) then m else head(q) fi .

    sort bufferNet .
    subsort msg < bufferNet .
    op emptyBN : -> bufferNet [ctor] .
    op _\_ : bufferNet bufferNet -> bufferNet [ctor assoc] .
    ops remove insert : bufferNet msg -> bufferNet .
    op include : msg bufferNet -> Bool .
    op empty : bufferNet -> Bool .

    vars b b' : bufferNet .
    eq (emptyBN \ b) = (b \ emptyBN) .

    eq insert(b, m) = (m \ b) .
    eq remove(emptyBN, m) = emptyBN .
    eq remove((m' \ b),m) = if m == m' then b else (m' \ remove(b, m)) fi .
    eq include(m,emptyBN) = false .
    eq include(m,(m' \ b)) = if m == m' then true else include(m,b) fi .
    eq empty(b) = (b == emptyBN) .

    op head : bufferNet -> msg .
    eq head((m \ emptyBN)) = m .
    eq head((m \ b)) = if ar(m) < ar(head(b)) then m else head(b) fi .

    rl [shuffle_bufA] :
        q / q' => q' / q .

    rl [shuffle_bufN] :
        b \ b' => b' \ b .
endm

mod POLICIES is
    pr BUFFERS .
    op takePolicy : Env bufferActor -> msg .
    op rcvPolicy : bufferActor msg -> Bool .
    op transferPolicy : Env bufferNet -> msg .
    op schedPolicy : Env netState aid -> Bool  .

    
    var e : Env .		var m : msg .		var b : bufferActor .		var b' : bufferNet .
    var n : netState .		var i : aid .   var db : DB .				vars t : Int .
    
    ceq transferPolicy(e , b') =  m if m := head(b') /\ ar(m) == e(now) .
    eq takePolicy (e,b) = head(b) .
    eq rcvPolicy (b,m) = true .
    eq schedPolicy(e, n, i) = true .


endm