load full-maude
(mod MY_MISC is
    inc CONFIGURATION .
    protecting NAT .
    --- pr STRING .
    sort MSGs VARs .
    sort STMT STMTs .
    subsort STMT < STMTs .
    subsort Msg < MSGs .
    subsort Nat < VARs .				

    op nomsg : -> MSGs [ctor] .
    op ConcatMSG : MSGs MSGs -> MSGs [ctor id: nomsg] .


    op nostmt : -> STMT [ctor] .
    op ConcatSTMT : STMTs STMTs -> STMTs [ctor id: nostmt] .	
    
endm)






(omod MY_ACTOR is
    protecting MY_MISC .
    ---sorts, subsorts, operations, classes, subclasses?, 
    sort HandlerName .
    class Actor | state : VARs, queue : MSGs , Executing : STMTs .		****** add handlers
    

    msg NewMSG : Oid Oid HandlerName -> Msg .
    op SendMSG : Oid HandlerName -> STMTs .				******
    op Handle : HandlerName -> STMTs .
    op Update : VARs STMTs -> VARs .
    op ack : -> HandlerName [ctor] .
---(
    op rec : VARs -> STMTs [ctor] .
    op output : VARs STMTs -> VARs .
    var a : VARs .
    eq output (a, rec (1) ) = 1 .
)    

endom)

(mod MY_CONFIGURATION is

    protecting MY_ACTOR .

    class Network | queue : MSGs . 
    
    ---vars, equations?, rules
    var actor actor' network : Oid .
    var hname : HandlerName .
    var msg : Msg .
    var msglist msglist' : MSGs .
    var stmt stmt' : STMTs .
    var vars : VARs .
    
    rl [gen_msg] :
    	< actor : Actor | Executing : ConcatSTMT(SendMSG(actor', hname), stmt) >		******
    =>
       < actor : Actor | Executing : stmt >
       NewMSG(actor, actor', hname) .

    rl [Net_receive] :
        NewMSG(actor,actor',hname)
    	< network : Network | queue : msglist >
    =>
    	< network : Network | queue : ConcatMSG(msglist,NewMSG(actor, actor', hname)) > .

    	
    rl [Exec_stmt]:
    	< actor : Actor | state : vars , Executing : ConcatSTMT(stmt,stmt') >
    =>
    	< actor : Actor | state : Update(vars,stmt) , Executing : stmt' > .

    rl [act_take]:
    	< actor : Actor | queue : ConcatMSG(NewMSG(actor, actor', hname),msglist) , Executing : nostmt >
    =>
    	< actor : Actor | queue : msglist , Executing : Handle(hname) > .

   rl [Net_transfer]:
    	< network : Network | queue : ConcatMSG(NewMSG(actor, actor', hname),msglist) >
    	< actor : Actor | queue : msglist >
    =>
    	< network : Network | queue : msglist >
    	< actor : Actor | queue : ConcatMSG(msglist,NewMSG(actor, actor', hname)) > .				******handler VARs?
    	

endm)


(rew [5] < sensor : Actor |  state : 0 , queue : nomsg , Executing : ConcatSTMT(SendMSG(CPU, ack), nostmt) > .)
---(< net : Network | queue : nomsg >
NewMSG(sensor , CPU, Sendack)
< CPU : Actor | state ; 0 , queue : nomsg , Executing : nostmt > .)
